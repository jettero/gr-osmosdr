/* -*- c++ -*- */
/*
 * Copyright 2013 Nuand
 * This file shamelessly borrow significant portions from the rtl, osmosdr,
 * uhd, etc. code by Dimitri Stolnikov <horiz0n@gmx.net>
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <iostream>
#include <stdio.h>
#include <boost/assign.hpp>
#include <gnuradio/gr_io_signature.h>
#include <libbladeRF.h>
#include "bladerf_sink_c.h"

using namespace boost::assign;

/*
 * Create a new instance of bladerf_source_c and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bladerf_sink_c_sptr make_bladerf_sink_c (const std::string & args)
{
  return gnuradio::get_initial_sptr(new bladerf_sink_c (args));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 0 input and 1 output.
 */
static const int MIN_IN = 1;   // mininum number of input streams
static const int MAX_IN = 1;   // maximum number of input streams
static const int MIN_OUT = 0;  // minimum number of output streams
static const int MAX_OUT = 0;  // maximum number of output streams

/*
 * The private constructor
 */
bladerf_sink_c::bladerf_sink_c (const std::string &args)
  : gr_sync_block ("bladerf_sink_c",
        gr_make_io_signature (MIN_IN, MAX_IN, sizeof (gr_complex)),
        gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (gr_complex)))
{
  std::cout << "Hello world, from bladeRF sink!" << std::endl;
}

/*
 * Our virtual destructor.
 */
bladerf_sink_c::~bladerf_sink_c ()
{
}

// TODO
int bladerf_sink_c::work( int noutput_items,
                         gr_vector_const_void_star &input_items,
                         gr_vector_void_star &output_items )
{
  const gr_complex *in = (const gr_complex *) input_items[0];
  return noutput_items ;
}

// TODO
std::vector<std::string> bladerf_sink_c::get_devices()
{
  return bladerf_common::devices();
}

// TODO
size_t bladerf_sink_c::get_num_channels()
{
  return 1;
}

// TODO
osmosdr::meta_range_t bladerf_sink_c::get_sample_rates()
{
  osmosdr::meta_range_t range;

  range += osmosdr::range_t( 5e6 ); /* out of spec but appears to work */
  range += osmosdr::range_t( 20e6 ); /* confirmed to work on fast machines */

  return range;
}

// TODO
double bladerf_sink_c::set_sample_rate(double rate)
{
  printf( "bladeRF: set_sample_rate( %f )\n", rate ) ;
  return get_sample_rate();
}

// TODO
double bladerf_sink_c::get_sample_rate()
{
  return 0;
}

// TODO
osmosdr::freq_range_t bladerf_sink_c::get_freq_range( size_t chan )
{
  osmosdr::freq_range_t range;

  range += osmosdr::range_t( 30e6, 6e9 );

  return range;
}

// TODO
double bladerf_sink_c::set_center_freq( double freq, size_t chan )
{
  printf( "bladeRF: set_center_freq( %f )\n", freq ) ;
  return 0;
}

// TODO
double bladerf_sink_c::get_center_freq( size_t chan )
{
  return 0;;
}

// TODO
double bladerf_sink_c::set_freq_corr( double ppm, size_t chan )
{
  printf( "bladeRF: set_freq_corr( %f )\n", ppm ) ;
  return get_freq_corr( chan );
}

// TODO
double bladerf_sink_c::get_freq_corr( size_t chan )
{
  return 0;
}

// TODO
std::vector<std::string> bladerf_sink_c::get_gain_names( size_t chan )
{
  std::vector< std::string > names;

  names += "VGA1";
  names += "VGA2";

  return names;
}

// TODO
osmosdr::gain_range_t bladerf_sink_c::get_gain_range( size_t chan )
{
  return get_gain_range( "RF", chan );
}

// TODO
osmosdr::gain_range_t bladerf_sink_c::get_gain_range( const std::string & name, size_t chan )
{
  return osmosdr::gain_range_t();
}

// TODO
bool bladerf_sink_c::set_gain_mode( bool automatic, size_t chan )
{
  printf( "bladeRF: set_gain_mode()\n" ) ;
  return get_gain_mode(chan);
}

// TODO
bool bladerf_sink_c::get_gain_mode( size_t chan )
{
  return 0;
}

// TODO
double bladerf_sink_c::set_gain( double gain, size_t chan )
{
  printf( "bladeRF: set_gain( %f )\n", gain ) ;
  return 0;
}

// TODO
double bladerf_sink_c::set_gain( double gain, const std::string & name, size_t chan)
{
  printf( "bladeRF: set_gain( %f, %s )\n", gain, name.c_str() ) ;
  return 0;
}

// TODO
double bladerf_sink_c::get_gain( size_t chan )
{
  return 0;
}

// TODO
double bladerf_sink_c::get_gain( const std::string & name, size_t chan )
{
  return get_gain( chan );
}

// TODO
double bladerf_sink_c::set_if_gain( double gain, size_t chan )
{
  printf( "bladeRF: set_if_gain( %f )\n", gain ) ;
  return gain;
}

// TODO
double bladerf_sink_c::set_bb_gain(double gain, size_t chan)
{
  printf( "bladeRF: set_bb_gain( %f )\n", gain ) ;
  return 0;
}

// TODO
std::vector< std::string > bladerf_sink_c::get_antennas( size_t chan )
{
  std::vector< std::string > antennas;

  antennas += get_antenna( chan );

  return antennas;
}

// TODO
std::string bladerf_sink_c::set_antenna( const std::string & antenna, size_t chan )
{
  printf( "bladeRF: set_antenna( %s )\n", antenna.c_str() ) ;
  return get_antenna( chan );
}

// TODO
std::string bladerf_sink_c::get_antenna( size_t chan )
{
  return "TX";
}

// TODO
double bladerf_sink_c::set_bandwidth( double bandwidth, size_t chan )
{
  printf( "bladeRF: set_bandwidth( %f )\n", bandwidth ) ;
  return bandwidth;
}

// TODO
double bladerf_sink_c::get_bandwidth( size_t chan )
{
  return 0;
}

// TODO
osmosdr::freq_range_t bladerf_sink_c::get_bandwidth_range( size_t chan )
{
  osmosdr::freq_range_t bandwidths;
  return bandwidths;
}
