/* -*- c++ -*- */
/*
 * Copyright 2013 Nuand
 * This file shamelessly borrow significant portions from the rtl, osmosdr,
 * uhd, etc. code by Dimitri Stolnikov <horiz0n@gmx.net>
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <iostream>
#include <stdio.h>
#include <boost/assign.hpp>
#include <gnuradio/gr_io_signature.h>
#include <libbladeRF.h>
#include "bladerf_sink_c.h"

using namespace boost::assign;

/*
 * Create a new instance of bladerf_source_c and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bladerf_sink_c_sptr make_bladerf_sink_c (const std::string & args)
{
  return gnuradio::get_initial_sptr(new bladerf_sink_c (args));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 0 input and 1 output.
 */
static const int MIN_IN = 1;   // mininum number of input streams
static const int MAX_IN = 1;   // maximum number of input streams
static const int MIN_OUT = 0;  // minimum number of output streams
static const int MAX_OUT = 0;  // maximum number of output streams

/*
 * The private constructor
 */
bladerf_sink_c::bladerf_sink_c (const std::string &args)
  : gr_sync_block ("bladerf_sink_c",
        gr_make_io_signature (MIN_IN, MAX_IN, sizeof (gr_complex)),
        gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (gr_complex)))
{
  std::cout << "Hello world, from bladeRF sink!" << std::endl;

  /* Set the output multiple to be called */
  this->set_output_multiple(4096);

  /* Open a device the device */
  this->dev = bladerf_open( "/dev/bladeRF1" ) ;
  if( !this->dev ) {
    std::runtime_error( std::string(__FUNCTION__) + " failed to open a device - any device!" ) ;
  }

  /* Set the sample range */
  this->sample_range = osmosdr::meta_range_t( 160e3, 40e6 ) ;

  /* Set the range of VGA1 */
  /* NOTE: This range is actually NEGATIVE but apparently you can't set negative gains*/
  this->vga1_range = osmosdr::gain_range_t( 4, 35 ) ;

  /* Set the range of VGA2 */
  this->vga2_range = osmosdr::gain_range_t( 0, 25 ) ;

  /* Set the frequency range */
  this->freq_range = osmosdr::freq_range_t( 300e6, 3.8e9 ) ;

  /* Set the bandwidth range */
  this->bandwidths = osmosdr::freq_range_t( 1.5e6, 28e6 ) ;

}

/*
 * Our virtual destructor.
 */
bladerf_sink_c::~bladerf_sink_c ()
{
  /* Close the device */
  bladerf_close( this->dev ) ;
}

int bladerf_sink_c::work( int noutput_items,
                         gr_vector_const_void_star &input_items,
                         gr_vector_void_star &output_items )
{
  const gr_complex *in = (const gr_complex *) input_items[0];
  if( noutput_items < 1024 ) {
    std::cout << "Refusing to consume <1024: " << noutput_items << std::endl ;
    return 0 ;
  }
  /* Consume all the output items */
  //std::cout << "Consumed: " << noutput_items << " items" << std::endl ;
  return noutput_items ;
}

std::vector<std::string> bladerf_sink_c::get_devices()
{
  return bladerf_common::devices();
}

size_t bladerf_sink_c::get_num_channels()
{
  /* Only one channel per bladeRF */
  return 1;
}

osmosdr::meta_range_t bladerf_sink_c::get_sample_rates()
{
  return this->sample_range ;
}

double bladerf_sink_c::set_sample_rate(double rate)
{
  if( this->dev ) {
    if( (uint32_t)rate == rate ) {
      /* Integer sample rate */
      int ret ;
      ret = bladerf_set_sample_rate( this->dev, TX, (uint32_t)rate ) ;
      if( ret ) {
        throw std::runtime_error( std::string(__FUNCTION__) + " failed to set sample rate" ) ;
      }
    } else {
      /* TODO: Fractional sample rate */
      int ret ;
      ret = bladerf_set_sample_rate( this->dev, TX, (uint32_t)rate ) ;
      if( ret ) {
        throw std::runtime_error( std::string(__FUNCTION__) + " failed to set fractional sample rate" ) ;
      }
    }
  } else {
    throw std::runtime_error( std::string(__FUNCTION__) + " failure due to device not being open" ) ;
  }
  printf( "bladeRF: set_sample_rate( %f )\n", rate ) ;
  return get_sample_rate();
}

double bladerf_sink_c::get_sample_rate()
{
  uint32_t rate ;
  if( this->dev ) {
    int ret ;
    ret = bladerf_get_sample_rate( this->dev, RX, &rate ) ;
    if( ret ) {
      throw std::runtime_error( std::string(__FUNCTION__) + " failed to get sample rate" ) ;
    }
  } else {
    throw std::runtime_error( std::string(__FUNCTION__) + " failure due to device not being open" ) ;
  }
  return (double)rate;
}

osmosdr::freq_range_t bladerf_sink_c::get_freq_range( size_t chan )
{
  return this->freq_range ;
}

double bladerf_sink_c::set_center_freq( double freq, size_t chan )
{
  if( this->dev ) {
    int ret ;
    ret = bladerf_set_frequency( this->dev, TX, (uint32_t)freq ) ;
    if( ret ) {
      throw std::runtime_error( std::string(__FUNCTION__) + " failed to set center frequency" ) ;
    }
  } else {
    throw std::runtime_error( std::string(__FUNCTION__) + " failure due to device not being open" ) ;
  }
  return this->get_center_freq() ;
}

double bladerf_sink_c::get_center_freq( size_t chan )
{
  uint32_t freq ;
  if( this->dev ) {
    int ret ;
    ret = bladerf_get_frequency( this->dev, TX, &freq ) ;
    if( ret ) {
      throw std::runtime_error( std::string(__FUNCTION__) + " failed to get center frequency" ) ;
    }
  } else {
    throw std::runtime_error( std::string(__FUNCTION__) + " failure due to device not being open" ) ;
  }
  return (double)freq ;
}

// TODO
double bladerf_sink_c::set_freq_corr( double ppm, size_t chan )
{
  printf( "bladeRF: set_freq_corr( %f )\n", ppm ) ;
  return get_freq_corr( chan );
}

// TODO
double bladerf_sink_c::get_freq_corr( size_t chan )
{
  return 0;
}

std::vector<std::string> bladerf_sink_c::get_gain_names( size_t chan )
{
  std::vector< std::string > names;

  names += "VGA1";
  names += "VGA2";

  return names;
}

// TODO: Make sure this applies to VGA2?
osmosdr::gain_range_t bladerf_sink_c::get_gain_range( size_t chan )
{
  return get_gain_range( "VGA2", chan );
}

osmosdr::gain_range_t bladerf_sink_c::get_gain_range( const std::string & name, size_t chan )
{ 
  if( name == "VGA1" ) {
    return this->vga1_range ;
  } else if( name == "VGA2" ) {
    return this->vga2_range ;
  } else {
    throw std::runtime_error( std::string(__FUNCTION__) + " gain range asked for unknown gain stage " + name ) ;
  }
}

// TODO
bool bladerf_sink_c::set_gain_mode( bool automatic, size_t chan )
{
  return false;
}

// TODO
bool bladerf_sink_c::get_gain_mode( size_t chan )
{
  return false;
}

// TODO: Make sure this applies to VGA2?
double bladerf_sink_c::set_gain( double gain, size_t chan )
{
  return this->set_gain( gain, "VGA2" ) ;
}

double bladerf_sink_c::set_gain( double gain, const std::string & name, size_t chan)
{
  if( this->dev ) {
    int ret ;
    if( name == "VGA1" ) {
      ret = bladerf_set_txvga1( this->dev, -(int)gain ) ;
    } else if( name == "VGA2" ) {
      ret = bladerf_set_txvga2( this->dev, (int)gain ) ;
    } else {
      throw std::runtime_error( std::string(__FUNCTION__) + " could not set gain for unknown gain stage " + name ) ;
    }
    /* Check for errors */
    if( ret ) {
      throw std::runtime_error( std::string(__FUNCTION__) + " could not set gain setting due to driver issue" ) ;
    }
  } else {
    throw std::runtime_error( std::string(__FUNCTION__) + " failure to get gain due to device not being open" ) ;
  }
  return this->get_gain( name ) ;
}

// TODO: Make this is applies to VGA2?
double bladerf_sink_c::get_gain( size_t chan )
{
  return this->get_gain( "VGA2" ) ;
}

double bladerf_sink_c::get_gain( const std::string & name, size_t chan )
{
  int gain ;
  int ret ;
  if( this->dev ) {
    if( name == "VGA1" ) {
      ret = bladerf_get_txvga2( this->dev, &gain ) ;
    } else if( name == "VGA2" ) {
      ret = bladerf_get_txvga1( this->dev, &gain ) ;
    } else {
      throw std::runtime_error( std::string(__FUNCTION__) + " could not get gain setting for unknown gain stage " + name ) ;
    }
    /* Check for errors */
    if( ret ) {
      throw std::runtime_error( std::string(__FUNCTION__) + " could not get gain setting for " + name ) ;
    }
  } else {
    throw std::runtime_error( std::string(__FUNCTION__) + " failure due to device not being open" ) ;
  } 
  return (double)gain ;
}

// TODO: Make sure this applies to VGA2
double bladerf_sink_c::set_if_gain( double gain, size_t chan )
{
  return this->set_gain( gain, "VGA2" ) ;
}

// TODO: Make sure this applies to VGA1
double bladerf_sink_c::set_bb_gain(double gain, size_t chan)
{
  return this->set_gain( gain, "VGA1" ) ;
}

// TODO: Figure out if this is right
std::vector< std::string > bladerf_sink_c::get_antennas( size_t chan )
{
  std::vector< std::string > antennas;

  antennas += get_antenna( chan );

  return antennas;
}

// TODO: Figure out if this is right
std::string bladerf_sink_c::set_antenna( const std::string & antenna, size_t chan )
{
  printf( "bladeRF: set_antenna( %s )\n", antenna.c_str() ) ;
  return get_antenna( chan );
}

// TODO: Figure out if this is right
std::string bladerf_sink_c::get_antenna( size_t chan )
{
  return "TX";
}

double bladerf_sink_c::set_bandwidth( double bandwidth, size_t chan )
{
  if( this->dev ) {
    int ret ;
    uint32_t actual ;
    
    ret = bladerf_set_bandwidth( this->dev, TX, (uint32_t)bandwidth, &actual ) ;
    if( ret ) {
      throw std::runtime_error( std::string(__FUNCTION__) + " could not get bandwidth due to driver error" ) ;
    }
  } else {
    throw std::runtime_error( std::string(__FUNCTION__) + " failure to set bandwidth due to device not being open" ) ;
  }
  return this->get_bandwidth() ;
}

double bladerf_sink_c::get_bandwidth( size_t chan )
{
  uint32_t bw ;
  if( this->dev ) {
    int ret ;

    ret = bladerf_get_bandwidth( this->dev, TX, &bw ) ;
    if( ret ) {
      throw std::runtime_error( std::string(__FUNCTION__) + " could not get bandwidth due to driver error" ) ;
    }
  } else {
    throw std::runtime_error( std::string(__FUNCTION__) + " failure to get bandwidth due to device not being open" ) ;
  }
  return (double)bw;
}

osmosdr::freq_range_t bladerf_sink_c::get_bandwidth_range( size_t chan )
{
  return this->bandwidths;
}
